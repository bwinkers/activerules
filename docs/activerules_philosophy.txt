ActiveRules Philosophy
======================

Stand on the shoulders of giants
--------------------------------
There is a LOT of REALLY good code out there. We don't want to recreate it.
What we do want to do go beyond what they  offer to create a comprehensive environment for 4th generation web apps.


Separation of Responsibility
----------------------------

1.	ActiveRules Site
2.	Site Modules
3.	MVC and HMVC support


Consistent Coding
-----------------

1.	Pass multiple parameters in arrays
	
	This removed reliance on parameter order and having to pass empty values.

2.	Perform logic using interfaces.
	
	This ensures a stable environment and API.

3.	Minimize singletons

	Outside of the AR instance which MUST be a one, singletons they should be used sparingly.
	Very things are really "global" in a multi-service HMVC environment.

4.	Use factories

	Factory methods should be used in most cases to ensure create an instance to provide a consistent API.

5.	Frameworks should not output anything

	The framework should load a module that is itself responsible for output.

6.	No early response
	
	All output, asides from streaming content, should be buffered until the whole output is ready.
	This differs from earlier versions of ActiveRules that sent headers and HTML head as soon as they were ready.
	We do this to allow us to completely change the response anywhere along the way.
	
	In the previous paradigm we may have allowed the browser to start loading JS and CSS earlier but once we sent header info we were committed to a given path response path.
	With the desire to load most JS and CSS as late as possible this is less of an issue and browser support was always questionable.


Class Definitions and Relations
-------------------------------

### Interfaces

Logic should be performed using Interface methods to ensure stable APIS.

Interfaces SHOULD be in the 'interfaces' subdirectory of a 'classes' directory.

### Classes

Abstract and concrete classes should be defined in the 'classes' directory of activerules or a module.


Documentation
-------------


	
